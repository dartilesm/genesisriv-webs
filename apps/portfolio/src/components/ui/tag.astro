---
interface Props {
  label: string;
  outlined?: boolean;
  variant?: "purple" | "blue" | "green" | "red";
  size?: "default" | "small";
  showDot?: boolean;
  class?: string;
}

const {
  label,
  outlined = false,
  variant = "purple",
  size = "default",
  class: className,
  showDot = true,
} = Astro.props;

const variantClasses = {
  purple: {
    bg: "bg-purple-100 dark:bg-purple-900/50 border-purple-500/20",
    text: "text-purple-700 dark:text-purple-300",
    dot: "bg-purple-400",
    dotPing: "bg-purple-500",
  },
  blue: {
    bg: "bg-blue-100 dark:bg-blue-900/50 border-blue-500/20",
    text: "text-blue-700 dark:text-blue-300",
    dot: "bg-blue-400",
    dotPing: "bg-blue-500",
  },
  green: {
    bg: "bg-green-100 dark:bg-green-900/50 border-green-500/20",
    text: "text-green-700 dark:text-green-300",
    dot: "bg-green-400",
    dotPing: "bg-green-500",
  },
  red: {
    bg: "bg-red-100 dark:bg-red-900/50 border-red-500/20",
    text: "text-red-700 dark:text-red-300",
    dot: "bg-red-400",
    dotPing: "bg-red-500",
  },
};

const classes = variantClasses[variant];
---

<div
  class:list={[
    "inline-flex items-center gap-2 rounded-full",
    {
      border: outlined,
      "px-3 py-1": size === "default",
      "px-2 py-0.5": size === "small",
    },
    classes.bg,
    className,
  ]}
>
  {
    showDot && (
      <span class='relative flex h-2 w-2'>
        <span
          class:list={[
            "animate-ping absolute inline-flex h-full w-full rounded-full opacity-75",
            classes.dot,
          ]}
        />
        <span class:list={["relative inline-flex rounded-full h-2 w-2", classes.dotPing]} />
      </span>
    )
  }
  <span
    class:list={[
      {
        "text-xs": size === "small",
        "text-sm": size === "default",
      },
      classes.text,
    ]}>{label}</span
  >
</div>
